---
title: "Parallel computing in Julia"
aliases:
  - /julia
  - /parallel_julia
  - julia-in-summer
sidebar: julia
---

**March 20<sup>th</sup> (Part 1) and 27<sup>th</sup> (Part 2), 10:00am - noon Pacific Time**

Julia is a high-level programming language well suited for scientific computing and data science. Just-in-time
compilation, among other things, makes Julia really fast yet interactive. For heavy computations, Julia
supports multi-threaded and multi-process parallelism, both natively and via a number of external packages. It
also supports memory arrays distributed across multiple processes either on the same or different nodes. In
this hands-on workshop, we will start with Julia's multi-threading features and then focus on Distributed
multi-processing standard library and its large array of tools. We will demo parallelization using two
problems: a slowly converging series and a Julia set. We will run examples on a multi-core laptop and an HPC
cluster.

**Instructor**: Alex Razoumov (SFU)

**Prerequisites:** Ideally, some familiarity with the Alliance's HPC cluster environment, in particular, with
the Slurm scheduler. Having some previous serial Julia programming experience would help, but we will start
slowly so you will be able to follow up even if you are new to Julia.

**Software**: There are a couple of options:

1. You can run Julia on our training cluster, in which case you will need a remote secure shell (SSH) client
installed on your computer. On Mac and Linux computers, SSH is usually pre-installed -- try typing `ssh` in a
terminal to make sure it is there. Many versions of Windows also provide an OpenSSH client by default â€“- try
opening PowerShell and typing `ssh` to see if it is available. If not, then we recommend installing the free
Home Edition of MobaXterm from
[https://mobaxterm.mobatek.net/download.html](https://mobaxterm.mobatek.net/download.html){target="_blank"}. We
will provide guest accounts on our training cluster, and you would not need to install Julia on your computer
in this setup.

2. You can run Julia on your own computer, in which case you can install it from
   [https://julialang.org/downloads](https://julialang.org/downloads){target="_blank"} -- this may take a
   while so please do this before the class.

<!-- 3. You can work on our remote training cluster via JupyterHub | Terminal. In this case you will want to ask -->
<!--    for 2-4 CPU cores and 3 hours. This is the easiest option (nothing to install on your computer), as you -->
<!--    will work entirely through a browser. -->

### Our Julia webinars

Since 2020, we've been teaching occasional webinars on parallel programming in Julia -- watch the recordings
[here](https://training.westdri.ca/programming/#julia){target="_blank"}.

### External links

- [Think Julia: How to Think Like a Computer Scientist](https://benlauwens.github.io/ThinkJulia.jl/latest/book.html){target="_blank"} by Ben Lauwens and Allen Downey is a very thorough introduction to non-parallel Julia for beginners
- [Julia at Scale](https://discourse.julialang.org/c/domain/parallel){target="_blank"} forum
- Baolai Ge's (SHARCNET) November 2020 webinar [Julia: Parallel computing revisited](https://youtu.be/xTLFz-5a5Ec){target="_blank"}
- [Julia performance tips](https://docs.julialang.org/en/v1/manual/performance-tips){target="_blank"}
- [How to optimise Julia code: A practical guide](https://viralinstruction.com/posts/optimise){target="_blank"}
- [A Deep Introduction to JIT Compilers](https://kipp.ly/blog/jits-intro){target="_blank"}
